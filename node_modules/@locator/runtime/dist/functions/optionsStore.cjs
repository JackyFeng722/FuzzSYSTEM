"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OptionsProvider = OptionsProvider;
exports.initOptions = initOptions;
exports.useOptions = useOptions;

var _web = require("solid-js/web");

var _solidJs = require("solid-js");

var _shared = require("@locator/shared");

function initOptions() {
  const [signalOptions, setSignalOptions] = (0, _solidJs.createSignal)((0, _shared.getStoredOptions)()); // This listens on localStorage changes, but the changes go only from scripts other than the current one and current one's content scripts

  (0, _shared.listenOnOptionsChanges)(newOptions => {
    setSignalOptions(newOptions);
  }); // This listens only on changes from the contents script for this current page

  window.addEventListener("message", event => {
    // We only accept messages from ourselves
    if (event.source != window) {
      return;
    }

    if (event.data.type && event.data.type == "LOCATOR_EXTENSION_UPDATED_OPTIONS") {
      setSignalOptions((0, _shared.getStoredOptions)());
    }
  }, false);

  function setOptions(newOptions) {
    const savedOptions = (0, _shared.getStoredOptions)();
    const optionsToSave = { ...savedOptions,
      ...newOptions
    };
    (0, _shared.setStoredOptions)(optionsToSave);
    setSignalOptions(optionsToSave);
  } // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore


  window.enableLocator = () => {
    setOptions({
      disabled: false
    });
    return "Locator enabled";
  };

  return {
    setOptions,
    getOptions: signalOptions
  };
}

const OptionsContext = (0, _solidJs.createContext)();

function OptionsProvider(props) {
  const options = initOptions();
  return (0, _web.createComponent)(OptionsContext.Provider, {
    value: options,

    get children() {
      return props.children;
    }

  });
}

function useOptions() {
  const options = (0, _solidJs.useContext)(OptionsContext);

  if (!options) {
    throw new Error("Options context is not provided");
  }

  return options;
}