"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.JSXTreeNodeElement = void 0;
exports.getElementInfo = getElementInfo;

var _parseDataId = require("../../functions/parseDataId");

var _getExpressionData = require("./getExpressionData");

var _getJSXComponentBoundingBox = require("./getJSXComponentBoundingBox");

var _goUpByTheTree = require("../goUpByTheTree");

var _HtmlElementTreeNode = require("../HtmlElementTreeNode");

function getElementInfo(target) {
  const found = target.closest("[data-locatorjs-id]");

  if (found && found instanceof HTMLElement && found.dataset && (found.dataset.locatorjsId || found.dataset.locatorjsStyled)) {
    const dataId = found.dataset.locatorjsId;
    const styledDataId = found.dataset.locatorjsStyled;

    if (!dataId) {
      return null;
    }

    const [fileFullPath] = (0, _parseDataId.parseDataId)(dataId);
    const [styledFileFullPath, styledId] = styledDataId ? (0, _parseDataId.parseDataId)(styledDataId) : [null, null];
    const locatorData = window.__LOCATOR_DATA__;

    if (!locatorData) {
      return null;
    }

    const fileData = locatorData[fileFullPath];

    if (!fileData) {
      return null;
    }

    const styledFileData = styledFileFullPath && locatorData[styledFileFullPath];
    const expData = (0, _getExpressionData.getExpressionData)(found, fileData);

    if (!expData) {
      return null;
    }

    const styledExpData = styledFileData && styledFileData.styledDefinitions[Number(styledId)]; // eslint-disable-next-line @typescript-eslint/no-unused-vars

    const styledLink = styledExpData && {
      filePath: styledFileData.filePath,
      projectPath: styledFileData.projectPath,
      column: (styledExpData.loc?.start.column || 0) + 1,
      line: styledExpData.loc?.start.line || 0
    }; // TODO move styled to separate data
    // const styled = found.dataset.locatorjsStyled
    //   ? getDataForDataId(found.dataset.locatorjsStyled)
    //   : null;

    const wrappingComponent = expData.wrappingComponentId !== null ? fileData.components[Number(expData.wrappingComponentId)] : null;
    return {
      thisElement: {
        box: found.getBoundingClientRect(),
        label: expData.name,
        link: {
          filePath: fileData.filePath,
          projectPath: fileData.projectPath,
          column: (expData.loc.start.column || 0) + 1,
          line: expData.loc.start.line || 0
        }
      },
      htmlElement: found,
      parentElements: [],
      componentBox: (0, _getJSXComponentBoundingBox.getJSXComponentBoundingBox)(found, locatorData, fileFullPath, Number(expData.wrappingComponentId)),
      componentsLabels: wrappingComponent ? [{
        label: wrappingComponent.name || "component",
        link: {
          filePath: fileData.filePath,
          projectPath: fileData.projectPath,
          column: (wrappingComponent.loc?.start.column || 0) + 1,
          line: wrappingComponent.loc?.start.line || 0
        }
      }] : []
    };
  } // return deduplicateLabels(labels);


  return null;
}

class JSXTreeNodeElement extends _HtmlElementTreeNode.HtmlElementTreeNode {
  getSource() {
    const dataId = this.element.dataset.locatorjsId;
    const locatorData = window.__LOCATOR_DATA__;

    if (dataId && locatorData) {
      const [fileFullPath] = (0, _parseDataId.parseDataId)(dataId);
      const fileData = locatorData[fileFullPath];

      if (fileData) {
        const expData = (0, _getExpressionData.getExpressionData)(this.element, fileData);

        if (expData) {
          return {
            fileName: fileData.filePath,
            projectPath: fileData.projectPath,
            columnNumber: (expData.loc.start.column || 0) + 1,
            lineNumber: expData.loc.start.line || 0
          };
        }
      }
    }

    return null;
  }

  getComponent() {
    const dataId = this.element.dataset.locatorjsId;
    const locatorData = window.__LOCATOR_DATA__;

    if (dataId && locatorData) {
      const [fileFullPath] = (0, _parseDataId.parseDataId)(dataId);
      const fileData = locatorData[fileFullPath];

      if (fileData) {
        const expData = (0, _getExpressionData.getExpressionData)(this.element, fileData);

        if (expData && expData.wrappingComponentId !== null) {
          const component = fileData.components[expData.wrappingComponentId];

          if (component) {
            return {
              label: component.name || "component",
              definitionLink: {
                fileName: fileData.filePath,
                projectPath: fileData.projectPath,
                columnNumber: (component.loc?.start.column || 0) + 1,
                lineNumber: component.loc?.start.line || 0
              }
            };
          }
        }
      }
    }

    return null;
  }

}

exports.JSXTreeNodeElement = JSXTreeNodeElement;

function getTree(element) {
  const originalRoot = new JSXTreeNodeElement(element);
  return (0, _goUpByTheTree.goUpByTheTree)(originalRoot);
}

const jsxAdapter = {
  getElementInfo,
  getTree
};
var _default = jsxAdapter;
exports.default = _default;