"use strict";

var _$template = require("solid-js/web").template;

var _$delegateEvents = require("solid-js/web").delegateEvents;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ChooseEditorDialog = ChooseEditorDialog;

var _web = require("solid-js/web");

var _buildLink = require("../functions/buildLink");

var _EditorLinkForm = require("./EditorLinkForm");

var _solidJs = require("solid-js");

var _goTo = require("../functions/goTo");

var _ProjectLinkForm = require("./ProjectLinkForm");

var _optionsStore = require("../functions/optionsStore");

const _tmpl$ = /*#__PURE__*/_$template(`<div class="bg-white p-4 rounded-xl border-2 border-red-500 shadow-xl cursor-auto pointer-events-auto z-10 max-w-2xl"><div class="mt-2"><label for="email" class="block text-sm  text-slate-700 font-bold">Link preview:</label><code class="flex first-letter:text-sm mt-1 bg-green-100 text-green-600 py-1 px-2 rounded whitespace-pre-wrap break-all"></code></div><div class="mt-4 flex gap-2 justify-between items-center"><div class="text-sm text-gray-600">Locator will remember your choice, you can change it later in settings.</div><div><button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">Go to code</button></div></div></div>`, 16),
      _tmpl$2 = /*#__PURE__*/_$template(`<div class="text-red-500 text-sm">Project path is required</div>`, 2);

function ChooseEditorDialog(props) {
  const options = (0, _optionsStore.useOptions)();
  const [selectedTarget, setSelectedTarget] = (0, _solidJs.createSignal)( // eslint-disable-next-line solid/reactivity
  Object.entries(props.targets)[0][0]);
  const [projectPath, setProjectPath] = (0, _solidJs.createSignal)( // eslint-disable-next-line solid/reactivity
  (0, _buildLink.getSavedProjectPath)(options) || props.originalLinkProps.projectPath);

  const correctedProjectPath = () => {
    let pp = projectPath();

    if (pp.at(-1) !== "/" && pp.at(-1) !== "\\") {
      pp += "/";
    }

    return pp;
  };

  const [needToFillLinkError, setNeedToFillLinkError] = (0, _solidJs.createSignal)(false);

  const currentLinkProps = () => ({ ...props.originalLinkProps,
    projectPath: correctedProjectPath()
  });

  const currentLink = () => (0, _buildLink.buildLink)(currentLinkProps(), props.targets, options, selectedTarget());

  return (() => {
    const _el$ = _tmpl$.cloneNode(true),
          _el$2 = _el$.firstChild,
          _el$3 = _el$2.firstChild,
          _el$4 = _el$3.nextSibling,
          _el$5 = _el$2.nextSibling,
          _el$6 = _el$5.firstChild,
          _el$7 = _el$6.nextSibling,
          _el$8 = _el$7.firstChild;

    (0, _web.insert)(_el$, (0, _web.createComponent)(_ProjectLinkForm.ProjectLinkForm, {
      get value() {
        return projectPath();
      },

      onChange: val => {
        setNeedToFillLinkError(false);
        setProjectPath(val);
      }
    }), _el$2);
    (0, _web.insert)(_el$, (() => {
      const _c$ = (0, _web.memo)(() => !!needToFillLinkError(), true);

      return () => _c$() ? _tmpl$2.cloneNode(true) : "";
    })(), _el$2);
    (0, _web.insert)(_el$, (0, _web.createComponent)(_EditorLinkForm.EditorLinkForm, {
      get targets() {
        return props.targets;
      },

      get selectedTarget() {
        return selectedTarget();
      },

      selectTarget: setSelectedTarget
    }), _el$2);
    (0, _web.insert)(_el$4, currentLink);

    _el$8.$$click = () => {
      options.setOptions({
        templateOrTemplateId: selectedTarget()
      });
      const newProjectPath = correctedProjectPath();

      if (newProjectPath) {
        options.setOptions({
          projectPath: newProjectPath
        });
      }

      (0, _goTo.goToLinkProps)(currentLinkProps(), props.targets, options);
      props.onClose();
    };

    return _el$;
  })();
}

_$delegateEvents(["click"]);