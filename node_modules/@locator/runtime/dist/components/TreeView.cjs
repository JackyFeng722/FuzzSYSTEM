"use strict";

var _$template = require("solid-js/web").template;

var _$delegateEvents = require("solid-js/web").delegateEvents;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TreeView = TreeView;

var _web = require("solid-js/web");

var _TreeNodeElementView = require("./TreeNodeElementView");

var _solidJs = require("solid-js");

var _dom = require("@floating-ui/dom");

const _tmpl$ = /*#__PURE__*/_$template(`<div><div><div class="m-2 bg-white rounded-md p-4 shadow-xl text-xs overflow-auto"></div></div></div>`, 6),
      _tmpl$2 = /*#__PURE__*/_$template(`<div></div>`, 2),
      _tmpl$3 = /*#__PURE__*/_$template(`<div class="mb-2"><button class="inline-flex cursor-pointer bg-gray-100 rounded-full hover:bg-gray-200 py-0 px-2 ">...</button></div>`, 4);

function TreeView(props) {
  let contentRef;
  const [pos, setPos] = (0, _solidJs.createSignal)();
  (0, _solidJs.createEffect)(() => {
    if (contentRef) {
      const originalBox = props.treeState.originalNode.getBox();
      (0, _dom.computePosition)({
        getBoundingClientRect: () => {
          return {
            top: originalBox?.y || 0,
            left: originalBox?.x || 0,
            width: 16,
            height: 16
          };
        }
      }, contentRef, {
        placement: "left-start",
        middleware: [(0, _dom.offset)(10), (0, _dom.shift)(), (0, _dom.flip)()]
      }).then(({
        x,
        y
      }) => {
        setPos({
          x,
          y
        });
      });
    }
  });
  return (() => {
    const _el$ = _tmpl$.cloneNode(true),
          _el$2 = _el$.firstChild,
          _el$3 = _el$2.firstChild;

    _el$.$$click = e => {
      if (e.currentTarget === e.target) {
        props.close();
      }
    };

    _el$.style.setProperty("position", "fixed");

    _el$.style.setProperty("top", "0");

    _el$.style.setProperty("left", "0");

    _el$.style.setProperty("width", "100vw");

    _el$.style.setProperty("height", "100vh");

    _el$.style.setProperty("pointer-events", "auto");

    _el$.style.setProperty("background-color", "rgba(0,0,0,0.1)");

    _el$.style.setProperty("z-index", "1001");

    const _ref$ = contentRef;
    typeof _ref$ === "function" ? _ref$(_el$2) : contentRef = _el$2;

    _el$2.style.setProperty("position", "absolute");

    _el$3.style.setProperty("max-height", "calc(100vh - 16px)");

    (0, _web.insert)(_el$3, (() => {
      const _c$ = (0, _web.memo)(() => !!props.treeState, true);

      return () => _c$() ? (() => {
        const _el$4 = _tmpl$2.cloneNode(true);

        (0, _web.insert)(_el$4, (() => {
          const _c$2 = (0, _web.memo)(() => !!props.treeState?.root.getParent(), true);

          return () => _c$2() ? (() => {
            const _el$5 = _tmpl$3.cloneNode(true),
                  _el$6 = _el$5.firstChild;

            _el$6.$$click = () => {
              const state = props.treeState;
              const parent = state.root.getParent();

              if (parent) {
                state.expandedIds.add(parent.uniqueId);
                props.setTreeState({ ...state,
                  root: parent
                });
              }
            };

            return _el$5;
          })() : null;
        })(), null);
        (0, _web.insert)(_el$4, (0, _web.createComponent)(_TreeNodeElementView.TreeNodeElementView, {
          get node() {
            return props.treeState.root;
          },

          get expandedIds() {
            return props.treeState.expandedIds;
          },

          get highlightedId() {
            return props.treeState.highlightedId;
          },

          expandId: id => {
            const state = props.treeState;
            state.expandedIds.add(id);
            props.setTreeState(state);
          },

          get targets() {
            return props.targets;
          },

          get setHighlightedBoundingBox() {
            return props.setHighlightedNode;
          },

          parentComponent: null
        }), null);
        return _el$4;
      })() : "no tree";
    })());
    (0, _web.effect)(_p$ => {
      const _v$ = `${pos()?.y || 0}px`,
            _v$2 = `${pos()?.x || 0}px`;
      _v$ !== _p$._v$ && _el$2.style.setProperty("top", _p$._v$ = _v$);
      _v$2 !== _p$._v$2 && _el$2.style.setProperty("left", _p$._v$2 = _v$2);
      return _p$;
    }, {
      _v$: undefined,
      _v$2: undefined
    });
    return _el$;
  })();
}

_$delegateEvents(["click"]);