"use strict";

var _$template = require("solid-js/web").template;

var _$delegateEvents = require("solid-js/web").delegateEvents;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Options = Options;

var _web = require("solid-js/web");

var _shared = require("@locator/shared");

var _solidJs = require("solid-js");

var _bannerClasses = require("../functions/bannerClasses");

var _buildLink = require("../functions/buildLink");

var _EditorLinkForm = require("./EditorLinkForm");

var _isExtension = require("../functions/isExtension");

var _linkTemplateUrl = require("../functions/linkTemplateUrl");

var _LogoIcon = _interopRequireDefault(require("./LogoIcon"));

var _OptionsCloseButton = require("./OptionsCloseButton");

var _ProjectLinkForm = require("./ProjectLinkForm");

var _optionsStore = require("../functions/optionsStore");

var _TransformLinkForm = require("./TransformLinkForm");

const _tmpl$ = /*#__PURE__*/_$template(`<div><div class="flex justify-between items-center"></div><div class="flex gap-2"><button class="text-slate-500 hover:text-slate-600 text-xs underline cursor-pointer">Reset all settings</button><button class="text-slate-500 hover:text-slate-600 text-xs underline cursor-pointer">Disable Locator </button></div></div>`, 10);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function Options(props) {
  const options = (0, _optionsStore.useOptions)();
  const [selectedTarget, setSelectedTarget] = (0, _solidJs.createSignal)( // eslint-disable-next-line solid/reactivity
  (0, _linkTemplateUrl.getLinkTypeOrTemplate)(props.targets, options));

  function selectTarget(val) {
    setSelectedTarget(val);
    options.setOptions({
      templateOrTemplateId: val
    });
  }

  const [projectPath, setProjectPath] = (0, _solidJs.createSignal)( // eslint-disable-next-line solid/reactivity
  (0, _buildLink.getSavedProjectPath)(options) || "");

  function saveProjectPath(newPath) {
    setProjectPath(newPath);
    options.setOptions({
      projectPath: newPath
    });
  }

  return (() => {
    const _el$ = _tmpl$.cloneNode(true),
          _el$2 = _el$.firstChild,
          _el$3 = _el$2.nextSibling,
          _el$4 = _el$3.firstChild,
          _el$5 = _el$4.nextSibling,
          _el$6 = _el$5.firstChild;

    (0, _web.insert)(_el$2, (0, _web.createComponent)(_LogoIcon.default, {}), null);
    (0, _web.insert)(_el$2, (0, _web.createComponent)(_OptionsCloseButton.OptionsCloseButton, {
      onClick: () => props.onClose()
    }), null);
    (0, _web.insert)(_el$, (0, _web.createComponent)(_ProjectLinkForm.ProjectLinkForm, {
      get value() {
        return projectPath();
      },

      onChange: function (newValue) {
        saveProjectPath(newValue);
      }
    }), _el$3);
    (0, _web.insert)(_el$, (0, _web.createComponent)(_TransformLinkForm.TransformLinkForm, {}), _el$3);
    (0, _web.insert)(_el$, (() => {
      const _c$ = (0, _web.memo)(() => !!!(0, _isExtension.isExtension)(), true);

      return () => _c$() ? (0, _web.createComponent)(_EditorLinkForm.EditorLinkForm, {
        get targets() {
          return props.targets;
        },

        get selectedTarget() {
          return selectedTarget();
        },

        selectTarget: selectTarget
      }) : null;
    })(), _el$3);

    _el$4.$$click = () => {
      (0, _shared.cleanOptions)();
      props.onClose();
    };

    _el$5.$$click = () => {
      if ((0, _isExtension.isExtension)()) {
        options.setOptions({
          disabled: true
        });
        props.onClose();
      } else {
        props.showDisableDialog();
      }
    };

    (0, _web.insert)(_el$5, () => (0, _isExtension.isExtension)() ? "on this project" : "", null);
    (0, _web.effect)(() => (0, _web.className)(_el$, (0, _bannerClasses.bannerClasses)() + " w-96"));
    return _el$;
  })();
}

_$delegateEvents(["click"]);