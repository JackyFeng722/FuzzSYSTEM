"use strict";

var _$template = require("solid-js/web").template;

var _$delegateEvents = require("solid-js/web").delegateEvents;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initRender = initRender;

var _web = require("solid-js/web");

var _shared = require("@locator/shared");

var _solidJs = require("solid-js");

var _isCombinationModifiersPressed = require("../functions/isCombinationModifiersPressed");

var _trackClickStats = require("../functions/trackClickStats");

var _MaybeOutline = require("./MaybeOutline");

var _SimpleNodeOutline = require("./SimpleNodeOutline");

var _IntroInfo = require("./IntroInfo");

var _Options = require("./Options");

var _bannerClasses = require("../functions/bannerClasses");

var _BannerHeader = _interopRequireDefault(require("./BannerHeader"));

var _isExtension = require("../functions/isExtension");

var _NoLinkDialog = require("./NoLinkDialog");

var _ChooseEditorDialog = require("./ChooseEditorDialog");

var _isLocatorsOwnElement = require("../functions/isLocatorsOwnElement");

var _goTo = require("../functions/goTo");

var _buildLink = require("../functions/buildLink");

var _getElementInfo = require("../adapters/getElementInfo");

var _getTree = require("../adapters/getTree");

var _TreeView = require("./TreeView");

var _optionsStore = require("../functions/optionsStore");

var _DisableConfirmation = require("./DisableConfirmation");

const _tmpl$ = /*#__PURE__*/_$template(`<div></div>`, 2),
      _tmpl$2 = /*#__PURE__*/_$template(`<div class="fixed top-0 left-0 w-screen h-screen flex items-center justify-center bg-black/70 pointer-events-auto"></div>`, 2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function Runtime(props) {
  const [uiMode, setUiMode] = (0, _solidJs.createSignal)(["off"]);
  const [holdingModKey, setHoldingModKey] = (0, _solidJs.createSignal)(false);
  const [currentElement, setCurrentElement] = (0, _solidJs.createSignal)(null);
  const [dialog, setDialog] = (0, _solidJs.createSignal)(null);
  const [highlightedNode, setHighlightedNode] = (0, _solidJs.createSignal)(null);
  const options = (0, _optionsStore.useOptions)();
  (0, _solidJs.createEffect)(() => {
    if (holdingModKey() && currentElement()) {
      document.body.classList.add("locatorjs-active-pointer");
    } else {
      document.body.classList.remove("locatorjs-active-pointer");
    }
  });

  function keyUpListener(e) {
    // if (e.code === "KeyO" && isCombinationModifiersPressed(e)) {
    //   if (uiMode()[0] === "tree") {
    //     setUiMode(["off"]);
    //   } else {
    //     setUiMode(["tree"]);
    //   }
    // }
    setHoldingModKey((0, _isCombinationModifiersPressed.isCombinationModifiersPressed)(e));
  }

  function keyDownListener(e) {
    setHoldingModKey((0, _isCombinationModifiersPressed.isCombinationModifiersPressed)(e));
  }

  function mouseOverListener(e) {
    setHoldingModKey((0, _isCombinationModifiersPressed.isCombinationModifiersPressed)(e));
    const target = e.target;

    if (target && target instanceof HTMLElement) {
      // Ignore LocatorJS elements
      if ((0, _isLocatorsOwnElement.isLocatorsOwnElement)(target)) {
        return;
      }

      (0, _solidJs.batch)(() => {
        setCurrentElement(target); // TODO: this is for highlighting elements in the tree, but need to move it to the adapter
        // if (solidMode()[0] === "tree" || solidMode()[0] === "treeFromElement") {
        //   const fiber = findFiberByHtmlElement(target, false);
        //   if (fiber) {
        //     const id = fiberToSimple(fiber, []);
        //     setHighlightedNode(id);
        //   }
        // }
      }); // const found =
      //   target.closest("[data-locatorjs-id]") ||
      //   searchDevtoolsRenderersForClosestTarget(target);
      // if (found && found instanceof HTMLElement) {
      //   setCurrentElement(found);
      // }
    }
  }

  function clickListener(e) {
    if (!(0, _isCombinationModifiersPressed.isCombinationModifiersPressed)(e)) {
      return;
    }

    const target = e.target;

    if (target && target instanceof HTMLElement) {
      if ((0, _isLocatorsOwnElement.isLocatorsOwnElement)(target)) {
        return;
      }

      const elInfo = (0, _getElementInfo.getElementInfo)(target, props.adapterId);

      if (elInfo) {
        const linkProps = elInfo.thisElement.link;

        if (linkProps) {
          e.preventDefault();
          e.stopPropagation();
          (0, _trackClickStats.trackClickStats)();

          if (!(0, _isExtension.isExtension)() && !options.getOptions().templateOrTemplateId || (0, _shared.detectSvelte)() && !linkProps.projectPath && !(0, _buildLink.getSavedProjectPath)(options)) {
            setDialog(["choose-editor", linkProps]);
          } else {
            // const link = buidLink(linkProps, props.targets);
            (0, _goTo.goToLinkProps)(linkProps, props.targets, options);
          }
        } else {
          console.error("[LocatorJS]: Could not find link: Element info: ", elInfo);
          setDialog(["no-link"]);
        }
      } else {
        console.error("[LocatorJS]: Could not find element info. Element: ", target);
        setDialog(["no-link"]);
      }
    }
  }

  function scrollListener() {
    setCurrentElement(null);
  }

  document.addEventListener("mouseover", mouseOverListener, {
    capture: true
  });
  document.addEventListener("keydown", keyDownListener);
  document.addEventListener("keyup", keyUpListener);
  document.addEventListener("click", clickListener, {
    capture: true
  });
  document.addEventListener("scroll", scrollListener);
  (0, _solidJs.onCleanup)(() => {
    document.removeEventListener("keyup", keyUpListener);
    document.removeEventListener("keydown", keyDownListener);
    document.removeEventListener("mouseover", mouseOverListener, {
      capture: true
    });
    document.removeEventListener("click", clickListener, {
      capture: true
    });
    document.removeEventListener("scroll", scrollListener);
  });

  function showTreeFromElement(element) {
    const newState = (0, _getTree.getTree)(element);

    if (newState) {
      setUiMode(["tree", newState]);
    }
  }

  function openOptions() {
    setUiMode(["options"]);
  }

  return [(0, _web.memo)((() => {
    const _c$ = (0, _web.memo)(() => uiMode()[0] === "tree", true);

    return () => _c$() ? (0, _web.createComponent)(_TreeView.TreeView, {
      get treeState() {
        return uiMode()[1];
      },

      close: () => setUiMode(["off"]),
      setTreeState: newState => setUiMode(["tree", newState]),

      get adapterId() {
        return props.adapterId;
      },

      get targets() {
        return props.targets;
      },

      setHighlightedNode: setHighlightedNode
    }) : null;
  })()), (0, _web.memo)((() => {
    const _c$2 = (0, _web.memo)(() => !!(holdingModKey() && currentElement()), true);

    return () => _c$2() ? (0, _web.createComponent)(_MaybeOutline.MaybeOutline, {
      get currentElement() {
        return currentElement();
      },

      showTreeFromElement: showTreeFromElement,

      get adapterId() {
        return props.adapterId;
      },

      get targets() {
        return props.targets;
      }

    }) : null;
  })()), (0, _web.memo)((() => {
    const _c$3 = (0, _web.memo)(() => !!holdingModKey(), true);

    return () => _c$3() ? (() => {
      const _el$ = _tmpl$.cloneNode(true);

      (0, _web.insert)(_el$, (0, _web.createComponent)(_BannerHeader.default, {
        openOptions: openOptions,

        get adapter() {
          return props.adapterId;
        }

      }));
      (0, _web.effect)(() => (0, _web.className)(_el$, (0, _bannerClasses.bannerClasses)()));
      return _el$;
    })() : null;
  })()), (0, _web.memo)((() => {
    const _c$4 = (0, _web.memo)(() => !!highlightedNode(), true);

    return () => _c$4() ? (0, _web.createComponent)(_SimpleNodeOutline.SimpleNodeOutline, {
      get node() {
        return highlightedNode();
      }

    }) : null;
  })()), (0, _web.memo)((() => {
    const _c$5 = (0, _web.memo)(() => !!(!(0, _isExtension.isExtension)() && options.getOptions().showIntro !== false), true);

    return () => _c$5() ? (0, _web.createComponent)(_IntroInfo.IntroInfo, {
      openOptions: openOptions,

      get hide() {
        return !!holdingModKey() || uiMode()[0] !== "off";
      },

      get adapter() {
        return props.adapterId;
      }

    }) : null;
  })()), (0, _web.memo)((() => {
    const _c$6 = (0, _web.memo)(() => uiMode()[0] === "options", true);

    return () => _c$6() ? (0, _web.createComponent)(_Options.Options, {
      get adapterId() {
        return props.adapterId;
      },

      get targets() {
        return props.targets;
      },

      onClose: () => {
        setUiMode(["off"]);
      },
      showDisableDialog: () => {
        setUiMode(["disable-confirmation"]);
      }
    }) : null;
  })()), (0, _web.memo)((() => {
    const _c$7 = (0, _web.memo)(() => uiMode()[0] === "disable-confirmation", true);

    return () => _c$7() ? (0, _web.createComponent)(_DisableConfirmation.DisableConfirmation, {
      onClose: () => {
        setUiMode(["off"]);
      }
    }) : null;
  })()), (0, _web.memo)((() => {
    const _c$8 = (0, _web.memo)(() => !!dialog(), true);

    return () => _c$8() && (() => {
      const _el$2 = _tmpl$2.cloneNode(true);

      _el$2.$$click = e => {
        if (e.currentTarget === e.target) {
          setDialog(null);
        }
      };

      (0, _web.insert)(_el$2, (() => {
        const _c$9 = (0, _web.memo)(() => dialog()[0] === "no-link", true);

        return () => _c$9() && (0, _web.createComponent)(_NoLinkDialog.NoLinkDialog, {});
      })(), null);
      (0, _web.insert)(_el$2, (() => {
        const _c$10 = (0, _web.memo)(() => dialog()[0] === "choose-editor", true);

        return () => _c$10() && (0, _web.createComponent)(_ChooseEditorDialog.ChooseEditorDialog, {
          get targets() {
            return props.targets;
          },

          get originalLinkProps() {
            return dialog()[1];
          },

          onClose: () => {
            setDialog(null);
          }
        });
      })(), null);
      return _el$2;
    })();
  })())];
}

function RuntimeWrapper(props) {
  const options = (0, _optionsStore.useOptions)();

  const isDisabled = () => options.getOptions().disabled || false;

  (0, _solidJs.createEffect)(() => {
    if (isDisabled() && (0, _isExtension.isExtension)()) {
      document.head.dataset.locatorDisabled = "disabled";
    } else {
      delete document.head.dataset.locatorDisabled;
    }
  });
  return (0, _web.createComponent)(_solidJs.Show, {
    get when() {
      return !isDisabled();
    },

    get children() {
      return (0, _web.createComponent)(Runtime, props);
    }

  });
}

function initRender(solidLayer, adapter, targets) {
  (0, _web.render)(() => (0, _web.createComponent)(_optionsStore.OptionsProvider, {
    get children() {
      return (0, _web.createComponent)(RuntimeWrapper, {
        get targets() {
          return Object.fromEntries(Object.entries(targets).map(([key, t]) => {
            return [key, typeof t == "string" ? {
              url: t,
              label: key
            } : t];
          }));
        },

        adapterId: adapter
      });
    }

  }), solidLayer);
}

_$delegateEvents(["click"]);