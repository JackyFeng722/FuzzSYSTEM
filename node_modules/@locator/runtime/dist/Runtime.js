import { template as _$template } from "solid-js/web";
import { delegateEvents as _$delegateEvents } from "solid-js/web";
import { className as _$className } from "solid-js/web";
import { effect as _$effect } from "solid-js/web";
import { insert as _$insert } from "solid-js/web";
import { createComponent as _$createComponent } from "solid-js/web";
import { memo as _$memo } from "solid-js/web";

const _tmpl$ = /*#__PURE__*/_$template(`<div></div>`, 2),
      _tmpl$2 = /*#__PURE__*/_$template(`<div class="fixed top-0 left-0 w-screen h-screen flex items-center justify-center bg-black/70 pointer-events-auto"></div>`, 2);

import { batch, createEffect, createSignal, For, onCleanup } from "solid-js";
import { render } from "solid-js/web";
import { fiberToSimple } from "./adapters/react/fiberToSimple";
import { gatherFiberRoots } from "./adapters/react/gatherFiberRoots";
import { isCombinationModifiersPressed } from "./isCombinationModifiersPressed";
import { trackClickStats } from "./trackClickStats";
import { getIdsOnPathToRoot } from "./getIdsOnPathToRoot";
import { RootTreeNode } from "./RootTreeNode";
import { MaybeOutline } from "./MaybeOutline";
import { SimpleNodeOutline } from "./SimpleNodeOutline";
import { hasExperimentalFeatures } from "./hasExperimentalFeatures";
import { IntroInfo } from "./IntroInfo";
import { Options } from "./Options";
import { bannerClasses } from "./bannerClasses";
import BannerHeader from "./BannerHeader";
import { isExtension } from "./isExtension";
import { getLocalStorageLinkTemplate } from "./linkTemplateUrl";
import { NoLinkDialog } from "./NoLinkDialog";
import { ChooseEditorDialog } from "./ChooseEditorDialog";
import { isLocatorsOwnElement } from "./isLocatorsOwnElement";
import { goToLinkProps } from "./goTo";
import { getSavedProjectPath } from "./buildLink";
import { getElementInfo } from "./getElementInfo";

function Runtime(props) {
  const [uiMode, setUiMode] = createSignal(["off"]);
  const [holdingModKey, setHoldingModKey] = createSignal(false);
  const [currentElement, setCurrentElement] = createSignal(null);
  const [dialog, setDialog] = createSignal(null);
  const [highlightedNode, setHighlightedNode] = createSignal(null);
  createEffect(() => {
    if (holdingModKey() && currentElement()) {
      document.body.classList.add("locatorjs-active-pointer");
    } else {
      document.body.classList.remove("locatorjs-active-pointer");
    }
  });
  createEffect(() => {
    if (uiMode()[0] === "tree" || uiMode()[0] === "treeFromElement") {
      document.body.classList.add("locatorjs-move-body");
    } else {
      document.body.classList.remove("locatorjs-move-body");
    }
  });

  function keyUpListener(e) {
    if (hasExperimentalFeatures()) {
      if (e.code === "KeyO" && isCombinationModifiersPressed(e)) {
        if (uiMode()[0] === "tree") {
          setUiMode(["off"]);
        } else {
          setUiMode(["tree"]);
        }
      }
    }

    setHoldingModKey(isCombinationModifiersPressed(e));
  }

  function keyDownListener(e) {
    setHoldingModKey(isCombinationModifiersPressed(e));
  }

  function mouseOverListener(e) {
    setHoldingModKey(isCombinationModifiersPressed(e));
    const target = e.target;

    if (target && target instanceof HTMLElement) {
      // Ignore LocatorJS elements
      if (isLocatorsOwnElement(target)) {
        return;
      }

      batch(() => {
        setCurrentElement(target); // TODO: this is for highlighting elements in the tree, but need to move it to the adapter
        // if (solidMode()[0] === "tree" || solidMode()[0] === "treeFromElement") {
        //   const fiber = findFiberByHtmlElement(target, false);
        //   if (fiber) {
        //     const id = fiberToSimple(fiber, []);
        //     setHighlightedNode(id);
        //   }
        // }
      }); // const found =
      //   target.closest("[data-locatorjs-id]") ||
      //   searchDevtoolsRenderersForClosestTarget(target);
      // if (found && found instanceof HTMLElement) {
      //   setCurrentElement(found);
      // }
    }
  }

  function clickListener(e) {
    if (!isCombinationModifiersPressed(e)) {
      return;
    }

    const target = e.target;

    if (target && target instanceof HTMLElement) {
      if (isLocatorsOwnElement(target)) {
        return;
      }

      const elInfo = getElementInfo(target, props.adapterId);

      if (elInfo) {
        const linkProps = elInfo.thisElement.link;

        if (linkProps) {
          e.preventDefault();
          e.stopPropagation();
          trackClickStats();

          if (!isExtension() && !getLocalStorageLinkTemplate() || props.adapterId === "svelte" && !linkProps.projectPath && !getSavedProjectPath()) {
            setDialog(["choose-editor", linkProps]);
          } else {
            // const link = buidLink(linkProps, props.targets);
            goToLinkProps(linkProps, props.targets);
          }
        } else {
          console.error("[LocatorJS]: Could not find link: Element info: ", elInfo);
          setDialog(["no-link"]);
        }
      } else {
        console.error("[LocatorJS]: Could not find element info. Element: ", target);
        setDialog(["no-link"]);
      }
    }
  }

  function scrollListener() {
    setCurrentElement(null);
  }

  document.addEventListener("mouseover", mouseOverListener, {
    capture: true
  });
  document.addEventListener("keydown", keyDownListener);
  document.addEventListener("keyup", keyUpListener);
  document.addEventListener("click", clickListener, {
    capture: true
  });
  document.addEventListener("scroll", scrollListener);
  onCleanup(() => {
    document.removeEventListener("keyup", keyUpListener);
    document.removeEventListener("keydown", keyDownListener);
    document.removeEventListener("mouseover", mouseOverListener, {
      capture: true
    });
    document.removeEventListener("click", clickListener, {
      capture: true
    });
    document.removeEventListener("scroll", scrollListener);
  });

  const getAllNodes = () => {
    if (uiMode()[0] === "tree" || uiMode()[0] === "treeFromElement") {
      const foundFiberRoots = [];
      gatherFiberRoots(document.body, foundFiberRoots);
      const simpleRoots = foundFiberRoots.map(fiber => {
        return fiberToSimple(fiber);
      });
      return simpleRoots;
    } //  else if () {
    //   const pathToParentTree = getIdsOnPathToRoot(solidMode()[1]!);
    //   if (pathToParentTree) {
    //     return [pathToParentTree];
    //   }
    // }


    return [];
  };

  function showTreeFromElement(element) {
    setUiMode(["treeFromElement", element]);
  }

  function openOptions() {
    setUiMode(["options"]);
  }

  return [_$memo((() => {
    const _c$ = _$memo(() => !!(uiMode()[0] === "tree" || uiMode()[0] === "treeFromElement"), true);

    return () => _c$() ? (() => {
      const _el$ = _tmpl$.cloneNode(true);

      _el$.style.setProperty("position", "fixed");

      _el$.style.setProperty("top", "0");

      _el$.style.setProperty("left", "0");

      _el$.style.setProperty("width", "50vw");

      _el$.style.setProperty("height", "100vh");

      _el$.style.setProperty("overflow", "auto");

      _el$.style.setProperty("pointer-events", "auto");

      _$insert(_el$, _$createComponent(For, {
        get each() {
          return getAllNodes();
        },

        children: node => _$createComponent(RootTreeNode, {
          node: node,

          get idsToShow() {
            return _$memo(() => uiMode()[0] === "treeFromElement", true)() ? getIdsOnPathToRoot(uiMode()[1]) : {};
          },

          highlightedNode: {
            getNode: highlightedNode,
            setNode: newId => {
              setHighlightedNode(newId);
            }
          },

          get targets() {
            return props.targets;
          }

        })
      }));

      return _el$;
    })() : null;
  })()), _$memo((() => {
    const _c$2 = _$memo(() => !!(holdingModKey() && currentElement()), true);

    return () => _c$2() ? _$createComponent(MaybeOutline, {
      get currentElement() {
        return currentElement();
      },

      showTreeFromElement: showTreeFromElement,

      get adapterId() {
        return props.adapterId;
      },

      get targets() {
        return props.targets;
      }

    }) : null;
  })()), _$memo((() => {
    const _c$3 = _$memo(() => !!holdingModKey(), true);

    return () => _c$3() ? (() => {
      const _el$2 = _tmpl$.cloneNode(true);

      _$insert(_el$2, _$createComponent(BannerHeader, {
        openOptions: openOptions,

        get adapter() {
          return props.adapterId;
        }

      }));

      _$effect(() => _$className(_el$2, bannerClasses()));

      return _el$2;
    })() : null;
  })()), _$memo((() => {
    const _c$4 = _$memo(() => !!highlightedNode(), true);

    return () => _c$4() ? _$createComponent(SimpleNodeOutline, {
      get node() {
        return highlightedNode();
      }

    }) : null;
  })()), _$createComponent(IntroInfo, {
    openOptions: openOptions,

    get hide() {
      return !!holdingModKey() || uiMode()[0] !== "off";
    },

    get adapter() {
      return props.adapterId;
    }

  }), _$memo((() => {
    const _c$5 = _$memo(() => uiMode()[0] === "options", true);

    return () => _c$5() ? _$createComponent(Options, {
      get adapterId() {
        return props.adapterId;
      },

      get targets() {
        return props.targets;
      },

      onClose: () => {
        setUiMode(["off"]);
      }
    }) : null;
  })()), _$memo((() => {
    const _c$6 = _$memo(() => !!dialog(), true);

    return () => _c$6() && (() => {
      const _el$3 = _tmpl$2.cloneNode(true);

      _el$3.$$click = e => {
        if (e.currentTarget === e.target) {
          setDialog(null);
        }
      };

      _$insert(_el$3, (() => {
        const _c$7 = _$memo(() => dialog()[0] === "no-link", true);

        return () => _c$7() && _$createComponent(NoLinkDialog, {});
      })(), null);

      _$insert(_el$3, (() => {
        const _c$8 = _$memo(() => dialog()[0] === "choose-editor", true);

        return () => _c$8() && _$createComponent(ChooseEditorDialog, {
          get targets() {
            return props.targets;
          },

          get originalLinkProps() {
            return dialog()[1];
          },

          onClose: () => {
            setDialog(null);
          }
        });
      })(), null);

      return _el$3;
    })();
  })())];
}

export function initRender(solidLayer, adapter, targets) {
  render(() => _$createComponent(Runtime, {
    get targets() {
      return Object.fromEntries(Object.entries(targets).map(([key, t]) => {
        return [key, typeof t == "string" ? {
          url: t,
          label: key
        } : t];
      }));
    },

    adapterId: adapter
  }), solidLayer);
}

_$delegateEvents(["click"]);